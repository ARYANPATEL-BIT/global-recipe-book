name: Lint & File Checks

on:
  pull_request:
  push:
    branches:
      - '**'

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Node.js for linters
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install HTML, CSS, JS linters
      - name: Install linters
        run: |
          npm install -g htmlhint stylelint stylelint-config-standard eslint

      # Lint HTML
      - name: Lint HTML
        run: |
          htmlhint "**/*.html" || true

      # Lint CSS
      - name: Lint CSS
        run: |
          stylelint "**/*.css" --config-basedir . --config '{"extends": "stylelint-config-standard"}' || true

      # Lint JS
      - name: Lint JavaScript
        run: |
          eslint "**/*.js" || true

      # ‚úÖ Check PDFs
      - name: Check PDF files
        run: |
          echo "üîç Checking PDF filenames and structure..."
          errors=0
          for pdf in $(find recipes -type f -name "*.pdf"); do
            filename=$(basename "$pdf")
            dir=$(dirname "$pdf")

            # Check lowercase
            if [[ "$filename" != "${filename,,}" ]]; then
              echo "::warning file=$pdf::PDF filename not lowercase: $filename"
              errors=$((errors+1))
            fi

            # Check underscores (no spaces)
            if [[ "$filename" =~ [[:space:]] ]]; then
              echo "::warning file=$pdf::PDF filename contains spaces: $filename"
              errors=$((errors+1))
            fi

            # Check folder depth (recipes/<country>/)
            parts=(${dir//\// })
            if [ ${#parts[@]} -lt 2 ]; then
              echo "::warning file=$pdf::PDF should be in recipes/<country>/ folder: $pdf"
              errors=$((errors+1))
            fi
          done
          if [ $errors -eq 0 ]; then
            echo "‚úÖ All PDFs look good!"
          fi

      # ‚úÖ Check image files
      - name: Check image files
        run: |
          echo "üñºÔ∏è Checking image filenames, extensions, and structure..."
          errors=0
          for img in $(find assets -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \)); do
            filename=$(basename "$img")
            dir=$(dirname "$img")
            ext="${filename##*.}"

            # Enforce lowercase
            if [[ "$filename" != "${filename,,}" ]]; then
              echo "::warning file=$img::Image filename not lowercase: $filename"
              errors=$((errors+1))
            fi

            # No spaces
            if [[ "$filename" =~ [[:space:]] ]]; then
              echo "::warning file=$img::Image filename contains spaces: $filename"
              errors=$((errors+1))
            fi

            # Folder depth check
            parts=(${dir//\// })
            if [ ${#parts[@]} -lt 2 ]; then
              echo "::warning file=$img::Image should be in assets/<country>/ folder: $img"
              errors=$((errors+1))
            fi

            # ‚úÖ Extension consistency check
            if [[ "$ext" == "jpeg" ]]; then
              echo "::warning file=$img::Use '.jpg' instead of '.jpeg' for consistency: $filename"
              errors=$((errors+1))
            fi
          done
          if [ $errors -eq 0 ]; then
            echo "‚úÖ All images look good!"
          fi
      - name: üîç Check matching PDF and JPG filenames
        run: |
          echo "Checking for matching .pdf and .jpg files..."
          mismatches=0
          for pdf in $(find recipes -type f -name "*.pdf"); do
            base="${pdf%.pdf}"
            jpg="${base}.jpg"
            jpeg="${base}.jpeg"
            if [ ! -f "$jpg" ] && [ ! -f "$jpeg" ]; then
              echo "‚ùå Missing image for: $pdf"
              mismatches=$((mismatches+1))
            fi
          done
          for img in $(find recipes -type f -name "*.jpg" -o -name "*.jpeg"); do
            base="${img%.*}"
            pdf="${base}.pdf"
            if [ ! -f "$pdf" ]; then
              echo "‚ùå Missing PDF for: $img"
              mismatches=$((mismatches+1))
            fi
          done
          if [ "$mismatches" -gt 0 ]; then
            echo "‚ùå Found $mismatches mismatched file pairs."
            exit 1
          else
            echo "‚úÖ All PDFs have matching JPGs!"
          fi

